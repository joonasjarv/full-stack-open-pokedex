name: Deployment pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches: [main]
    types: [opened, synchronize]

jobs:
  simple_deployment_pipeline:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies 
        run: npm install  
      - name: Check style
        run: npm run eslint
      - name: Build
        run: npm run build
      - name: Run tests
        run: npm run test
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      - name: Run E2E tests
        run: npx playwright test
      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - name: Deploy to Fly
        if: ${{ github.event_name == 'push' && !contains(github.event.head_commit.message, '#skip') }}
        run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
  tag_release:
    runs-on: ubuntu-20.04
    needs: simple_deployment_pipeline
    if: ${{ github.event_name == 'push' && !contains(github.event.head_commit.message, '#skip') }}
    steps:
      - uses: actions/checkout@v4
      - name: Bump version and push tag
        uses: anothrNick/github-tag-action@1.71.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEFAULT_BUMP: patch
          WITH_V: true

  notify_discord_on_success:
    runs-on: ubuntu-20.04
    needs: [simple_deployment_pipeline, tag_release]
    steps:
      - uses: actions/checkout@v4
      - name: Store timestamp
        run: echo "TIMESTAMP=$(TZ='Europe/Helsinki' date +'%T')" >> $GITHUB_ENV
      - run: git fetch --prune --unshallow --tag
      - name: Get latest tag
        run: echo "LATEST_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
      - name: Notify Discord success
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d '{
                "username": "GitHub Actions Pipeline",
                "avatar_url": "https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/6.png",
                "embeds": [
                  {
                    "title": "A new version of Pokedex deployed",
                    "description": "by ${{ github.actor }}. Version: ${{ env.LATEST_TAG }}",
                    "color": 65280,
                    "footer": {
                      "text": "Severity: Informational | Time: ${{ env.TIMESTAMP }}"
                    }
                  }
                ]
              }' \
            ${{ secrets.DISCORD_WEBHOOK }}

  notify_discord_on_failure:
    runs-on: ubuntu-20.04
    needs: simple_deployment_pipeline
    if: ${{ failure() && github.event_name == 'push' }}
    steps:
      - uses: actions/checkout@v4
      - name: Store timestamp
        run: echo "TIMESTAMP=$(TZ='Europe/Helsinki' date +'%T')" >> $GITHUB_ENV
      - name: Notify Discord failure
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d '{
                "username": "GitHub Actions Pipeline",
                "avatar_url": "https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/6.png",
                "embeds": [
                  {
                    "title": "Build failed",
                    "description": "commit [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) by ${{ github.actor }} broke the build.",
                    "color": 16711680,
                    "footer": {
                      "text": "Severity: Error | Time: ${{ env.TIMESTAMP }}"
                    }
                  }
                ]
              }' \
            ${{ secrets.DISCORD_WEBHOOK }}
